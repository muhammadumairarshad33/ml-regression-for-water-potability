{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "24c8b0ac-0afe-4a22-aa63-338a25bf1eec",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-21 23:43:07.728 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run C:\\ProgramData\\anaconda3\\Lib\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n",
      "2025-08-21 23:43:07.735 Session state does not function when running a script without `streamlit run`\n",
      "2025-08-21 23:43:07.741 No runtime found, using MemoryCacheStorageManager\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "DeltaGenerator(_root_container=1, _parent=DeltaGenerator())"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import joblib\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Set page config\n",
    "st.set_page_config(\n",
    "    page_title=\"Water Potability Prediction\",\n",
    "    page_icon=\"💧\",\n",
    "    layout=\"wide\"\n",
    ")\n",
    "\n",
    "# Title and description\n",
    "st.title(\"💧 Water Potability Prediction\")\n",
    "st.markdown(\"\"\"\n",
    "This app predicts whether water is safe for human consumption (potable) based on its chemical properties.\n",
    "Upload a CSV file or input values manually to get predictions.\n",
    "\"\"\")\n",
    "\n",
    "# Sidebar for navigation\n",
    "st.sidebar.title(\"Navigation\")\n",
    "options = st.sidebar.radio(\"Choose an option:\", \n",
    "                          [\"Home\", \"Data Analysis\", \"Model Training\", \"Prediction\", \"About\"])\n",
    "\n",
    "# Load or train model\n",
    "@st.cache_resource\n",
    "def load_or_train_model():\n",
    "    try:\n",
    "        # Try to load pre-trained model\n",
    "        model = joblib.load('water_potability_model.pkl')\n",
    "        st.sidebar.success(\"Pre-trained model loaded successfully!\")\n",
    "        return model\n",
    "    except:\n",
    "        # If no pre-trained model exists, train a new one\n",
    "        st.sidebar.info(\"Training a new model...\")\n",
    "        \n",
    "        # Load data\n",
    "        df_water = pd.read_csv('water_potability.csv')\n",
    "        df_clean = df_water.fillna(df_water.mean())\n",
    "        \n",
    "        # Prepare data\n",
    "        X = df_clean.drop('Potability', axis=1)\n",
    "        y = df_clean['Potability']\n",
    "        \n",
    "        # Train model\n",
    "        model = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "        model.fit(X, y)\n",
    "        \n",
    "        # Save model for future use\n",
    "        joblib.dump(model, 'water_potability_model.pkl')\n",
    "        st.sidebar.success(\"New model trained and saved successfully!\")\n",
    "        return model\n",
    "\n",
    "# Load data function\n",
    "@st.cache_data\n",
    "def load_data():\n",
    "    df_water = pd.read_csv('water_potability.csv')\n",
    "    df_clean = df_water.fillna(df_water.mean())\n",
    "    return df_clean\n",
    "\n",
    "if options == \"Home\":\n",
    "    st.header(\"Welcome to Water Potability Prediction\")\n",
    "    st.markdown(\"\"\"\n",
    "    ### What is Water Potability?\n",
    "    Water potability refers to whether water is safe for human consumption. \n",
    "    This application uses machine learning to predict water potability based on various chemical properties.\n",
    "    \n",
    "    ### Features Used:\n",
    "    - **pH**: Hydrogen ion concentration\n",
    "    - **Hardness**: Capacity of water to precipitate soap\n",
    "    - **Solids**: Total dissolved solids\n",
    "    - **Chloramines**: Chlorine + ammonia compounds\n",
    "    - **Sulfate**: Sulfate concentration\n",
    "    - **Conductivity**: Electrical conductivity of water\n",
    "    - **Organic_carbon**: Organic carbon content\n",
    "    - **Trihalomethanes**: Chemical compounds formed during water disinfection\n",
    "    - **Turbidity**: Cloudiness or haziness of water\n",
    "    \n",
    "    ### How to Use:\n",
    "    1. Navigate to **Data Analysis** to explore the dataset\n",
    "    2. Go to **Model Training** to train or retrain the model\n",
    "    3. Use **Prediction** to make predictions on new data\n",
    "    \"\"\")\n",
    "\n",
    "elif options == \"Data Analysis\":\n",
    "    st.header(\"Data Analysis\")\n",
    "    \n",
    "    df_clean = load_data()\n",
    "    \n",
    "    # Show dataset\n",
    "    if st.checkbox(\"Show raw data\"):\n",
    "        st.subheader(\"Water Potability Dataset\")\n",
    "        st.dataframe(df_clean)\n",
    "    \n",
    "    # Show basic statistics\n",
    "    if st.checkbox(\"Show statistics\"):\n",
    "        st.subheader(\"Dataset Statistics\")\n",
    "        st.write(df_clean.describe())\n",
    "    \n",
    "    # Show correlation matrix\n",
    "    if st.checkbox(\"Show correlation matrix\"):\n",
    "        st.subheader(\"Correlation Matrix\")\n",
    "        fig, ax = plt.subplots(figsize=(10, 8))\n",
    "        corr_matrix = df_clean.corr()\n",
    "        sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', ax=ax)\n",
    "        st.pyplot(fig)\n",
    "    \n",
    "    # Show target distribution\n",
    "    if st.checkbox(\"Show target distribution\"):\n",
    "        st.subheader(\"Potability Distribution\")\n",
    "        fig, ax = plt.subplots(figsize=(8, 6))\n",
    "        sns.countplot(x='Potability', data=df_clean, ax=ax)\n",
    "        ax.set_title('Distribution of Potable vs Non-Potable Water Samples')\n",
    "        st.pyplot(fig)\n",
    "\n",
    "elif options == \"Model Training\":\n",
    "    st.header(\"Model Training\")\n",
    "    \n",
    "    df_clean = load_data()\n",
    "    \n",
    "    # Prepare data\n",
    "    X = df_clean.drop('Potability', axis=1)\n",
    "    y = df_clean['Potability']\n",
    "    \n",
    "    # Train-test split\n",
    "    test_size = st.slider(\"Test set size\", 0.1, 0.4, 0.2)\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=42, stratify=y)\n",
    "    \n",
    "    st.write(f\"Training set size: {X_train.shape[0]}\")\n",
    "    st.write(f\"Testing set size: {X_test.shape[0]}\")\n",
    "    \n",
    "    # Model parameters\n",
    "    st.subheader(\"Model Parameters\")\n",
    "    n_estimators = st.slider(\"Number of trees\", 10, 200, 100)\n",
    "    max_depth = st.slider(\"Max depth\", 5, 50, 20)\n",
    "    \n",
    "    if st.button(\"Train Model\"):\n",
    "        with st.spinner(\"Training model...\"):\n",
    "            # Train model\n",
    "            model = RandomForestClassifier(\n",
    "                n_estimators=n_estimators,\n",
    "                max_depth=max_depth,\n",
    "                random_state=42\n",
    "            )\n",
    "            model.fit(X_train, y_train)\n",
    "            \n",
    "            # Make predictions\n",
    "            y_pred = model.predict(X_test)\n",
    "            accuracy = accuracy_score(y_test, y_pred)\n",
    "            \n",
    "            # Save model\n",
    "            joblib.dump(model, 'water_potability_model.pkl')\n",
    "            \n",
    "            st.success(f\"Model trained successfully! Accuracy: {accuracy:.4f}\")\n",
    "            \n",
    "            # Show feature importance\n",
    "            st.subheader(\"Feature Importance\")\n",
    "            feature_importance = pd.DataFrame({\n",
    "                'Feature': X.columns,\n",
    "                'Importance': model.feature_importances_\n",
    "            }).sort_values('Importance', ascending=False)\n",
    "            \n",
    "            fig, ax = plt.subplots(figsize=(10, 6))\n",
    "            sns.barplot(x='Importance', y='Feature', data=feature_importance, ax=ax)\n",
    "            ax.set_title('Feature Importance')\n",
    "            st.pyplot(fig)\n",
    "\n",
    "elif options == \"Prediction\":\n",
    "    st.header(\"Water Potability Prediction\")\n",
    "    \n",
    "    model = load_or_train_model()\n",
    "    \n",
    "    # Prediction options\n",
    "    prediction_method = st.radio(\"Choose prediction method:\", \n",
    "                                [\"Manual Input\", \"Upload CSV File\"])\n",
    "    \n",
    "    if prediction_method == \"Manual Input\":\n",
    "        st.subheader(\"Enter Water Quality Parameters\")\n",
    "        \n",
    "        col1, col2, col3 = st.columns(3)\n",
    "        \n",
    "        with col1:\n",
    "            ph = st.number_input(\"pH\", min_value=0.0, max_value=14.0, value=7.0, step=0.1)\n",
    "            hardness = st.number_input(\"Hardness\", min_value=0.0, value=150.0, step=1.0)\n",
    "            solids = st.number_input(\"Solids\", min_value=0.0, value=20000.0, step=100.0)\n",
    "        \n",
    "        with col2:\n",
    "            chloramines = st.number_input(\"Chloramines\", min_value=0.0, value=7.0, step=0.1)\n",
    "            sulfate = st.number_input(\"Sulfate\", min_value=0.0, value=300.0, step=1.0)\n",
    "            conductivity = st.number_input(\"Conductivity\", min_value=0.0, value=400.0, step=1.0)\n",
    "        \n",
    "        with col3:\n",
    "            organic_carbon = st.number_input(\"Organic Carbon\", min_value=0.0, value=10.0, step=0.1)\n",
    "            trihalomethanes = st.number_input(\"Trihalomethanes\", min_value=0.0, value=50.0, step=1.0)\n",
    "            turbidity = st.number_input(\"Turbidity\", min_value=0.0, value=4.0, step=0.1)\n",
    "        \n",
    "        # Create input array\n",
    "        input_data = np.array([[ph, hardness, solids, chloramines, sulfate, \n",
    "                              conductivity, organic_carbon, trihalomethanes, turbidity]])\n",
    "        \n",
    "        if st.button(\"Predict Potability\"):\n",
    "            prediction = model.predict(input_data)\n",
    "            prediction_proba = model.predict_proba(input_data)\n",
    "            \n",
    "            st.subheader(\"Prediction Result\")\n",
    "            if prediction[0] == 1:\n",
    "                st.success(\"✅ The water is POTABLE (safe for consumption)\")\n",
    "            else:\n",
    "                st.error(\"❌ The water is NOT POTABLE (unsafe for consumption)\")\n",
    "            \n",
    "            st.write(\"Prediction Confidence:\")\n",
    "            st.write(f\"Probability of Non-Potable: {prediction_proba[0][0]:.4f}\")\n",
    "            st.write(f\"Probability of Potable: {prediction_proba[0][1]:.4f}\")\n",
    "    \n",
    "    else:  # Upload CSV File\n",
    "        st.subheader(\"Upload CSV File for Prediction\")\n",
    "        \n",
    "        uploaded_file = st.file_uploader(\"Choose a CSV file\", type=\"csv\")\n",
    "        \n",
    "        if uploaded_file is not None:\n",
    "            try:\n",
    "                # Read uploaded file\n",
    "                df_upload = pd.read_csv(uploaded_file)\n",
    "                \n",
    "                # Check if all required columns are present\n",
    "                required_columns = ['ph', 'Hardness', 'Solids', 'Chloramines', 'Sulfate', \n",
    "                                  'Conductivity', 'Organic_carbon', 'Trihalomethanes', 'Turbidity']\n",
    "                \n",
    "                if all(col in df_upload.columns for col in required_columns):\n",
    "                    st.success(\"File uploaded successfully!\")\n",
    "                    st.dataframe(df_upload.head())\n",
    "                    \n",
    "                    # Make predictions\n",
    "                    predictions = model.predict(df_upload[required_columns])\n",
    "                    prediction_proba = model.predict_proba(df_upload[required_columns])\n",
    "                    \n",
    "                    # Add predictions to dataframe\n",
    "                    df_upload['Potability_Prediction'] = predictions\n",
    "                    df_upload['Non_Potable_Probability'] = prediction_proba[:, 0]\n",
    "                    df_upload['Potable_Probability'] = prediction_proba[:, 1]\n",
    "                    \n",
    "                    # Display results\n",
    "                    st.subheader(\"Prediction Results\")\n",
    "                    st.dataframe(df_upload)\n",
    "                    \n",
    "                    # Download results\n",
    "                    csv = df_upload.to_csv(index=False)\n",
    "                    st.download_button(\n",
    "                        label=\"Download Predictions as CSV\",\n",
    "                        data=csv,\n",
    "                        file_name=\"water_potability_predictions.csv\",\n",
    "                        mime=\"text/csv\"\n",
    "                    )\n",
    "                    \n",
    "                    # Show summary\n",
    "                    potable_count = sum(predictions)\n",
    "                    non_potable_count = len(predictions) - potable_count\n",
    "                    \n",
    "                    st.subheader(\"Prediction Summary\")\n",
    "                    col1, col2 = st.columns(2)\n",
    "                    with col1:\n",
    "                        st.metric(\"Potable Samples\", potable_count)\n",
    "                    with col2:\n",
    "                        st.metric(\"Non-Potable Samples\", non_potable_count)\n",
    "                    \n",
    "                else:\n",
    "                    st.error(\"Uploaded file doesn't contain all required columns.\")\n",
    "                    st.write(\"Required columns:\", required_columns)\n",
    "                    \n",
    "            except Exception as e:\n",
    "                st.error(f\"Error processing file: {e}\")\n",
    "\n",
    "elif options == \"About\":\n",
    "    st.header(\"About\")\n",
    "    st.markdown(\"\"\"\n",
    "    ### Water Potability Prediction App\n",
    "    \n",
    "    This application uses a Random Forest classifier to predict whether water is safe for human consumption\n",
    "    based on various chemical properties.\n",
    "    \n",
    "    ### Dataset\n",
    "    The model is trained on the Water Potability dataset from Kaggle, which contains water quality metrics\n",
    "    for 3276 different water samples.\n",
    "    \n",
    "    ### Model\n",
    "    - **Algorithm**: Random Forest Classifier\n",
    "    - **Features**: 9 water quality parameters\n",
    "    - **Target**: Potability (0 = Not Potable, 1 = Potable)\n",
    "    \n",
    "    ### How to Deploy on Streamlit Cloud\n",
    "    1. Create a GitHub repository with this code and the dataset\n",
    "    2. Go to [Streamlit Cloud](https://streamlit.io/cloud)\n",
    "    3. Connect your GitHub account and select the repository\n",
    "    4. Set the main file path to `app.py`\n",
    "    5. Deploy!\n",
    "    \n",
    "    ### Requirements\n",
    "    The following Python packages are required:\n",
    "    - streamlit\n",
    "    - pandas\n",
    "    - numpy\n",
    "    - scikit-learn\n",
    "    - matplotlib\n",
    "    - seaborn\n",
    "    - joblib\n",
    "    \n",
    "    You can install them using:\n",
    "    ```bash\n",
    "    pip install streamlit pandas numpy scikit-learn matplotlib seaborn joblib\n",
    "    ```\n",
    "    \"\"\")\n",
    "\n",
    "# Footer\n",
    "st.sidebar.markdown(\"---\")\n",
    "st.sidebar.info(\"💧 Water Potability Prediction App | Built with Streamlit\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b4aa3a99-ff62-4ecc-aa3c-3331b2ae5408",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
